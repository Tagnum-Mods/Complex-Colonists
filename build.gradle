buildscript {
    repositories {
        maven {
            name = 'MinecraftForge'
            url = 'https://maven.minecraftforge.net/'
        }
        mavenCentral()
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7.+'
    }
}

plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.jetbrains.changelog' version '1.2.1'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
// MixinGradle:
apply plugin: 'org.spongepowered.mixin'


version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

configurations {
    library
    implementation.extendsFrom library
}

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    // You must be aware of the Mojang license when using the 'official' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    mappings channel: mapping_channel, version: mapping_version

    copyIdeResources = true

    runs {
        configureEach {
            workingDirectory project.file('run')

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            // example of overriding the workingDirectory set in configureEach above
            workingDirectory project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', mod_id, '--all',
                    '--existing-mod', 'minecolonies',
                    '--existing-mod', 'blockui',
                    '--existing-mod', 'multi-piston',
                    '--existing-mod', 'domum_ornamentum',
                    '--existing-mod', 'structurize',
                    '--output', file('src/generated/resources/'),
                    '--existing', file('src/main/resources/'),
                    '--existing', file('src/generated/resources/')
        }
    }
}

mixin {
    add sourceSets.main, "complexcolonists.refmap.json"
    config 'complexcolonists.mixins.json'
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: mc_version, minecraft_version_range: mc_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,

            blockui_version: blockui_version, domum_ornamentum_version: domum_ornamentum_version,
            minecolonies_version: minecolonies_version, multipiston_version: multi_piston_version,
            structurize_version: structurize_version, minecolonies_version_range: minecolonies_version_range
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenCentral()
    flatDir {
        dirs 'libs'
    }
    maven {
        name 'CurseMaven'
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name 'BlameJared'
        url 'https://maven.blamejared.com'
    }
    maven {
        name 'LDTTeam - Modding'
        url 'https://ldtteam.jfrog.io/ldtteam/modding/'
    }
    maven {
        name "Progwml6 maven"
        url "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        name "ModMaven"
        url "https://modmaven.k-4u.nl"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    // ===== [ Minecolonies ] =====
    library fg.deobf("com.ldtteam:datagenerators:${datagen_version}")
    implementation fg.deobf("com.ldtteam:structurize:${structurize_version}")
    implementation fg.deobf("com.ldtteam:minecolonies:${minecolonies_version}")
    implementation fg.deobf("com.ldtteam:domum_ornamentum:${domum_ornamentum_version}:universal")
    implementation fg.deobf("com.ldtteam:multipiston:${multi_piston_version}")
    implementation fg.deobf("com.ldtteam:blockui:${blockui_version}")

    // ===== [ Runtime Mods ] =====

    //runtimeOnly fg.deobf("curse.maven:configured-457570:${configured_curse}")
    runtimeOnly fg.deobf("curse.maven:ilikewood-324164:${ilikewood_curse}")
    //runtimeOnly fg.deobf("curse.maven:journeymap-32274:${journeymap_curse}")

    // ===== [ Optional ] =====

    compileOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}:api")
    //runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")

    implementation fg.deobf("curse.maven:cucumber-272335:${cucumber_curse}")
    implementation fg.deobf("curse.maven:extended-crafting-268387:${extendedcrafting_curse}")

    compileOnly(fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}"))
    compileOnly(fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}"))
    runtimeOnly(fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}"))

    // Mixin Stuff
    annotationProcessor 'org.spongepowered:mixin:0.8.4:processor'
    implementation 'com.intellij:annotations:12.0@jar'
}

tasks.named('jar', Jar).configure {
    exclude '*.xcf'
    exclude '*.bbmodel'
    exclude '*.svg'

    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConnector"          : "com.tagnumelite.complexcolonists.core.mixin.MixinConnector"
        ])
    }

    // This is the preferred method to reobfuscate your jar file
    finalizedBy 'reobfJar'
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

changelog {
    version = "${project.version}"
    path = "${project.projectDir}/CHANGELOG.md"
    header = "[${-> version.get()}]"
    itemPrefix = "-"
    keepUnreleasedSection = true
    unreleasedTerm = "[Unreleased]"
    groups = ["Added", "Changed", "Deprecated", "Removed", "Fixed", "Security"]
}

if (System.getenv().CURSEFORGE_API_KEY != null) {
    curseforge {
        debug = true
        apiKey = System.getenv().CURSEFORGE_API_KEY
        project {
            id = '000000'
            addGameVersion "${mc_version}"
            changelog = "${project.changelog.get(mod_version).toString()}"
            changelogType = 'markdown'
            releaseType = "alpha"

            mainArtifact(jar) {
                relations {
                    requiredDependency 'minecolonies'
                }
            }
        }
    }
}
