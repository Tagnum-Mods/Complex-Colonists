buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7.+'
    }
}

plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'org.jetbrains.changelog' version '1.2.1'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
// MixinGradle:
apply plugin: 'org.spongepowered.mixin'

version = "${mod_version}"
group = 'com.tagnumelite.complexcolonists'
archivesBaseName = 'complexcolonists'

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)
sourceSets {
    api {
        java {}
    }
}

configurations {
    library
    apiCompile.extendsFrom(compile)
    apiCompileOnly.extendsFrom(compileOnly)
    apiRuntimeOnly.extendsFrom(runtimeOnly)
    implementation.extendsFrom library
}
//println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    // You must be aware of the Mojang license when using the 'official' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    mappings channel: 'official', version: "${mc_version}"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        all {
            lazyToken('minecraft_classpath') {
                configurations.library.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
            }
        }

        client {
            workingDirectory project.file('run')

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'complexcolonists'

            mods {
                complexcolonists {
                    //source sourceSets.api
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'complexcolonists'

            mods {
                complexcolonists {
                    //source sourceSets.api
                    source sourceSets.main
                }
            }
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            workingDirectory project.file('run')

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'complexcolonists'

            mods {
                complexcolonists {
                    //source sourceSets.api
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'complexcolonists', '--all',
                    '--existing-mod', 'minecolonies',
                    '--existing-mod', 'blockui',
                    '--existing-mod', 'multi-piston',
                    '--existing-mod', 'domum_ornamentum',
                    '--existing-mod', 'structurize',
                    '--output', file('src/generated/resources/'),
                    '--existing', file('src/main/resources/'),
                    '--existing', file('src/generated/resources/')

            mods {
                complexcolonists {
                    //source sourceSets.api
                    source sourceSets.main
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, "complexcolonists.refmap.json"
    config 'complexcolonists.mixins.json'
}

processResources {
    exclude('**/*.xcf')
}

/*
processResources {
    duplicatesStrategy DuplicatesStrategy.EXCLUDE
    inputs.property 'mod_version', project.mod_version
    inputs.property 'mc_version', project.mc_version
    inputs.property 'minecolonies_version', project.minecolonies_version

    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'

        expand 'minecolonies_version': project.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
    }
}
*/

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenCentral()
    flatDir {
        dirs 'libs'
    }
    maven {
        name 'CurseMaven'
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name 'BlameJared'
        url 'https://maven.blamejared.com'
    }
    maven {
        name 'LDTTeam - Modding'
        url 'https://ldtteam.jfrog.io/ldtteam/modding/'
    }
    maven {
        name "Progwml6 maven"
        url "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        name "ModMaven"
        url "https://modmaven.k-4u.nl"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    // ===== [ Minecolonies ] =====
    library fg.deobf("com.ldtteam:datagenerators:${datagen_version}")
    implementation fg.deobf("com.ldtteam:structurize:${structurize_version}")
    implementation fg.deobf("com.ldtteam:minecolonies:${minecolonies_version}")
    implementation fg.deobf("com.ldtteam:domum_ornamentum:${domum_ornamentum_version}:universal")
    implementation fg.deobf("com.ldtteam:multi-piston:${multi_piston_version}")
    implementation fg.deobf("com.ldtteam:blockui:${blockui_version}")

    // ===== [ Optional ] =====

    compileOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}:api")
    //runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")

    implementation fg.deobf("curse.maven:cucumber-272335:${cucumber_curse}")
    implementation fg.deobf("curse.maven:extended-crafting-268387:${extendedcrafting_curse}")

    compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}")



    // Mixin Stuff
    annotationProcessor 'org.spongepowered:mixin:0.8.4:processor'
    implementation 'com.intellij:annotations:12.0@jar'
}

jar {
    exclude '*.bbmodel'
    exclude '*.svg'

    manifest {
        attributes([
            "Specification-Title"     : "complexcolonists",
            "Specification-Vendor"    : "examplemodsareus",
            "Specification-Version"   : "1", // We are version 1 of ourselves
            "Implementation-Title"    : project.name,
            "Implementation-Version"  : "${mod_version}",
            "Implementation-Vendor"   : "examplemodsareus",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "MixinConnector"          : "com.tagnumelite.complexcolonists.core.mixin.MixinConnector"
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

changelog {
    version = "${project.version}"
    path = "${project.projectDir}/CHANGELOG.md"
    header = "[${-> version.get()}]"
    itemPrefix = "-"
    keepUnreleasedSection = true
    unreleasedTerm = "[Unreleased]"
    groups = ["Added", "Changed", "Deprecated", "Removed", "Fixed", "Security"]
}

if (System.getenv().CURSEFORGE_API_KEY != null) {
    curseforge {
        debug = true
        apiKey = System.getenv().CURSEFORGE_API_KEY
        project {
            id = '000000'
            addGameVersion "${mc_version}"
            changelog = "${project.changelog.get(mod_version).toString()}"
            changelogType = 'markdown'
            releaseType = "alpha"

            mainArtifact(jar) {
                relations {
                    requiredDependency 'minecolonies'
                }
            }
        }
    }
}
